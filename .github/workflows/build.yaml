# yaml-language-server: $schema=./build.yaml
name: Build and Deploy
on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:  
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        services:
          [
            { "imageName": "node-service", "directory": "./node-service" },
            { "imageName": "python-service", "directory": "./python-service" },
            { "imageName": "go-service", "directory": "./go-service" },
          ]
    permissions:
      contents: read
      packages: write
    outputs:
      containerImage-node: ${{ steps.image-tag.outputs.image-node-service }}
      containerImage-python: ${{ steps.image-tag.outputs.image-python-service }}
      containerImage-go: ${{ steps.image-tag.outputs.image-go-service }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      # Login against a Docker registry except on PR
      # https://github.com/docker/login-action
      - name: Log into registry ${{ env.REGISTRY }}
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.PACKAGES_TOKEN }}

      # Extract metadata (tags, labels) for Docker
      # https://github.com/docker/metadata-action
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/${{ matrix.services.imageName }}
          tags: |
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=ref,event=branch
            type=sha

      # Build and push Docker image with Buildx (don't push on PR)
      # https://github.com/docker/build-push-action
      - name: Build and push Docker image
        uses: docker/build-push-action@v2
        with:
          context: ${{ matrix.services.directory }}
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: Output image tag
        id: image-tag
        run: echo "::set-output name=image-${{ matrix.services.imageName }}::${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/${{ matrix.services.imageName }}:sha-$(git rev-parse --short HEAD)" | tr '[:upper:]' '[:lower:]'

  deployiac:
    environment:
      name: development
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      
      - name: Register Providers
        uses: azure/CLI@v1
        if: ${{ false }}
        with:
          inlineScript: |
            az provider register --namespace Microsoft.DocumentDB
            az provider register --namespace Microsoft.OperationalInsights
            az provider register --namespace Microsoft.ApiManagement
            az provider register --namespace microsoft.app
            az provider register --namespace microsoft.insights
            az provider register --namespace microsoft.servicelinker
      
      - name: Create Resource Group
        uses: azure/CLI@v1
        with:
          inlineScript: |
            az group create -g ${{ secrets.RESOURCE_GROUP }} -l centralus

      # Deploy Bicep file
      - name: deploy
        id: deployApps
        uses: azure/arm-deploy@v1
        with:
          subscriptionId: ${{ secrets.AZURE_SUBSCRIPTION }}
          resourceGroupName: ${{ secrets.RESOURCE_GROUP }} 
          template: ./deploy/main.bicep
          parameters:
            minReplicas=0 
            nodeImage=${{ needs.build.outputs.containerImage-node }}
            nodePort=3000 
            pythonImage=${{ needs.build.outputs.containerImage-python }}
            pythonPort=5000 
            goImage=${{ needs.build.outputs.containerImage-go }}
            goPort=8050 
            containerRegistry=${{ env.REGISTRY }} 
            containerRegistryUsername=${{ github.actor }} 
            containerRegistryPassword=${{ secrets.PACKAGES_TOKEN }} 
            deployApim=true
          failOnStdErr: false

      - name: Define DNS Records
        id: dns
        shell: pwsh
        run: |
          $records = @{
            records=@(
              @{
                hostname="maxam.${{ secrets.ENVIRONMENT_SHORT }}"
                cname='${{steps.deployApps.outputs.nodeFqdn}}'
              }
            )
          }
          $recordsJson = $records|convertto-json -compress
          write-host $recordsJson
          "::set-output name=dnsrecords::'$recordsJson'"
    outputs:
      dnsrecords: ${{ steps.dns.outputs.dnsrecords }}
  deploydns:  
    environment:
      name: production
    runs-on: ubuntu-latest    
    needs: [deployiac]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}      

      - name: Deploy bicep
        uses: azure/CLI@v1
        with:
          inlineScript: |
            "${{needs.deployiac.outputs.dnsrecords}}"
            az deployment group create -g ${{ secrets.RESOURCE_GROUP }} -f ./deploy/foundation.bicep \
             -p \
             dnsEntries=${{needs.deployiac.outputs.dnsrecords}}